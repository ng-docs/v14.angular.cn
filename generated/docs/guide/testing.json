{
  "id": "guide/testing",
  "title": "Testing",
  "contents": "\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/testing.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <p><a id=\"top\"></a></p>\n<h1 id=\"testing\" translation-result=\"on\">测试<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#testing\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"testing\">Testing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#testing\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">测试你的 Angular 应用可以帮助你检查此应用是否正常运行。</p><p translation-origin=\"off\">Testing your Angular application helps you check that your app is working as you expect.</p>\n\n<h2 id=\"prerequisites\" translation-result=\"on\">前提条件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#prerequisites\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"prerequisites\">Prerequisites<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">在为 Angular 应用编写测试之前，你应该对这些概念有一个基本的了解：</p><p translation-origin=\"off\">Before writing tests for your Angular app, you should have a basic understanding of the following concepts:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">Angular 的基本原理</p><p translation-origin=\"off\">Angular fundamentals</p>\n\n</li>\n<li>\n<p>JavaScript</p>\n</li>\n<li>\n<p>HTML</p>\n</li>\n<li>\n<p>CSS</p>\n</li>\n<li>\n<p><a href=\"cli\">Angular CLI</a></p>\n</li>\n</ul>\n<p translation-result=\"on\">本测试文档通过使用 <a href=\"cli\">Angular CLI</a> 创建的范例应用，为对 Angular 应用进行单元测试和集成测试提供了技巧和方法。这个范例应用很像<a href=\"tutorial\"><em>“英雄之旅”</em>教程</a>中的应用。</p><p translation-origin=\"off\">The testing documentation offers tips and techniques for unit and integration testing Angular applications through a sample application created with the <a href=\"cli\">Angular CLI</a>.\nThis sample application is much like the one in the <a href=\"tutorial\"><em>Tour of Heroes</em> tutorial</a>.</p>\n\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\">如果你要试用本指南中所讲的应用，请<live-example name=\"testing\" nodownload=\"\">在浏览器中运行它</live-example>或<live-example name=\"testing\" downloadonly=\"\">下载并在本地运行它</live-example>。</p><p translation-origin=\"off\">If you'd like to experiment with the application that this guide describes, <live-example name=\"testing\" nodownload=\"\">run it in your browser</live-example> or <live-example name=\"testing\" downloadonly=\"\">download and run it locally</live-example>.</p>\n\n</div>\n<p><a id=\"setup\"></a></p>\n<h2 id=\"set-up-testing\" translation-result=\"on\">建立环境<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#set-up-testing\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"set-up-testing\">Set up testing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#set-up-testing\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Angular CLI 会下载并安装试用 <a href=\"https://jasmine.github.io\">Jasmine 测试框架</a> 测试 Angular 应用时所需的一切。</p><p translation-origin=\"off\">The Angular CLI downloads and installs everything you need to test an Angular application with the <a href=\"https://jasmine.github.io\">Jasmine test framework</a>.</p>\n\n<p translation-result=\"on\">你使用 CLI 创建的项目是可以立即用于测试的。运行 CLI 命令 <a href=\"cli/test\"><code>ng test</code></a> 即可：</p><p translation-origin=\"off\">The project you create with the CLI is immediately ready to test.\nJust run the <a href=\"cli/test\"><code>ng test</code></a> CLI command:</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng test\n\n</code-example>\n<p translation-result=\"on\"><code>ng test</code> 命令在<em>监视模式</em>下构建应用，并启动 <a href=\"https://karma-runner.github.io\">karma 测试运行器</a>。</p><p translation-origin=\"off\">The <code>ng test</code> command builds the application in <em>watch mode</em>,\nand launches the <a href=\"https://karma-runner.github.io\">Karma test runner</a>.</p>\n\n<p translation-result=\"on\">它的控制台输出一般是这样的：</p><p translation-origin=\"off\">The console output looks a bit like this:</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\n10% building modules 1/1 modules 0 active\n…INFO [karma]: Karma v1.7.1 server started at http://0.0.0.0:9876/\n…INFO [launcher]: Launching browser Chrome …\n…INFO [launcher]: Starting browser Chrome\n…INFO [Chrome …]: Connected on socket …\nChrome …: Executed 3 of 3 SUCCESS (0.135 secs / 0.205 secs)\n\n</code-example>\n<p translation-result=\"on\">最后一行很重要。它表示 Karma 运行了三个测试，而且这些测试都通过了。</p><p translation-origin=\"off\">The last line of the log is the most important.\nIt shows that Karma ran three tests that all passed.</p>\n\n<p translation-result=\"on\">它还会打开 Chrome 浏览器并在“ Jasmine HTML 报告器”中显示测试输出，就像这样。</p><p translation-origin=\"off\">A Chrome browser also opens and displays the test output in the \"Jasmine HTML Reporter\" like this.</p>\n\n<div class=\"lightbox\">\n<img alt=\"Jasmine HTML Reporter in the browser\" src=\"generated/images/guide/testing/initial-jasmine-html-reporter.png\" width=\"502\" height=\"306\">\n</div>\n<p translation-result=\"on\">大多数人都会觉得浏览器中的报告比控制台中的日志更容易阅读。可以点击某一行测试，来单独重跑这个测试，或者点击一行描述信息来重跑所选测试组（“测试套件”）中的那些测试。</p><p translation-origin=\"off\">Most people find this browser output easier to read than the console log.\nClick on a test row to re-run just that test or click on a description to re-run the tests in the selected test group (\"test suite\").</p>\n\n<p translation-result=\"on\">同时，<code>ng test</code> 命令还会监听这些变化。</p><p translation-origin=\"off\">Meanwhile, the <code>ng test</code> command is watching for changes.</p>\n\n<p translation-result=\"on\">要查看它的实际效果，就对 <code>app.component.ts</code> 做一个小修改，并保存它。这些测试就会重新运行，浏览器也会刷新，然后新的测试结果就出现了。</p><p translation-origin=\"off\">To see this in action, make a small change to <code>app.component.ts</code> and save.\nThe tests run again, the browser refreshes, and the new test results appear.</p>\n\n<h2 id=\"configuration\" translation-result=\"on\">配置<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#configuration\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"configuration\">Configuration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#configuration\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">CLI 会为你生成 Jasmine 和 Karma 的配置文件。</p><p translation-origin=\"off\">The CLI takes care of Jasmine and Karma configuration for you.</p>\n\n<p translation-result=\"on\">不过也可以通过编辑 <code>src/</code> 目录下的 <code>karma.conf.js</code> 和 <code>test.ts</code> 文件来微调很多选项。</p><p translation-origin=\"off\">Fine-tune many options by editing the <code>karma.conf.js</code> in the root folder of the project and\nthe <code>test.ts</code> files in the <code>src/</code> folder.</p>\n\n<p translation-result=\"on\"><code>karma.conf.js</code> 文件是 karma 配置文件的一部分。CLI 会基于 <code>angular.json</code> 文件中指定的项目结构和 <code>karma.conf.js</code> 文件，来在内存中构建出完整的运行时配置。</p><p translation-origin=\"off\">The <code>karma.conf.js</code> file is a partial Karma configuration file.\nThe CLI constructs the full runtime configuration in memory, based on application structure specified in the <code>angular.json</code> file, supplemented by <code>karma.conf.js</code>.</p>\n\n<p translation-result=\"on\">要进一步了解 Jasmine 和 Karma 的配置项，请搜索网络。</p><p translation-origin=\"off\">Search the web for more details about Jasmine and Karma configuration.</p>\n\n<h3 id=\"other-test-frameworks\" translation-result=\"on\">其他测试框架<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#other-test-frameworks\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"other-test-frameworks\">Other test frameworks<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#other-test-frameworks\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">你还可以使用其它的测试库和测试运行器来对 Angular 应用进行单元测试。每个库和运行器都有自己特有的安装过程、配置项和语法。</p><p translation-origin=\"off\">You can also unit test an Angular application with other testing libraries and test runners.\nEach library and runner has its own distinctive installation procedures, configuration, and syntax.</p>\n\n<p translation-result=\"on\">要了解更多，请搜索网络。</p><p translation-origin=\"off\">Search the web to learn more.</p>\n\n<h3 id=\"test-file-name-and-location\" translation-result=\"on\">测试文件名及其位置<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#test-file-name-and-location\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"test-file-name-and-location\">Test file name and location<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#test-file-name-and-location\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">查看 <code>src/app</code> 文件夹。</p><p translation-origin=\"off\">Look inside the <code>src/app</code> folder.</p>\n\n<p translation-result=\"on\">CLI 为 <code>AppComponent</code> 生成了一个名叫 <code>app.component.spec.ts</code> 的测试文件。</p><p translation-origin=\"off\">The CLI generated a test file for the <code>AppComponent</code> named <code>app.component.spec.ts</code>.</p>\n\n<div class=\"alert is-important\">\n<p translation-result=\"on\">测试文件的扩展名<strong>必须是 <code>.spec.ts</code></strong>，这样工具才能识别出它是一个测试文件，也叫规约（spec）文件。</p><p translation-origin=\"off\">The test file extension <strong>must be <code>.spec.ts</code></strong> so that tooling can identify it as a file with tests (also known as a <em>spec</em> file).</p>\n\n</div>\n<p translation-result=\"on\"><code>app.component.ts</code> 和 <code>app.component.spec.ts</code> 文件位于同一个文件夹中，而且相邻。其根文件名部分（<code>app.component</code>）都是一样的。</p><p translation-origin=\"off\">The <code>app.component.ts</code> and <code>app.component.spec.ts</code> files are siblings in the same folder.\nThe root file names (<code>app.component</code>) are the same for both files.</p>\n\n<p translation-result=\"on\">请在你的项目中对<em>任意类型</em>的测试文件都坚持这两条约定。</p><p translation-origin=\"off\">Adopt these two conventions in your own projects for <em>every kind</em> of test file.</p>\n\n<p><a id=\"q-spec-file-location\"></a></p>\n<h4 id=\"place-your-spec-file-next-to-the-file-it-tests\" translation-result=\"on\">把测试规约（spec）文件放在它要测试的文件旁边<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#place-your-spec-file-next-to-the-file-it-tests\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"place-your-spec-file-next-to-the-file-it-tests\">Place your spec file next to the file it tests<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#place-your-spec-file-next-to-the-file-it-tests\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">最好把单元测试规约文件放到与它们测试的应用源码文件相同的文件夹中：</p><p translation-origin=\"off\">It's a good idea to put unit test spec files in the same folder\nas the application source code files that they test:</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">这些测试很容易找到。</p><p translation-origin=\"off\">Such tests are painless to find</p>\n\n</li>\n<li>\n<p translation-result=\"on\">你一眼就能看到应用中是否缺少一些测试。</p><p translation-origin=\"off\">You see at a glance if a part of your application lacks tests</p>\n\n</li>\n<li>\n<p translation-result=\"on\">临近的测试可以揭示一个部件会如何在上下文中工作。</p><p translation-origin=\"off\">Nearby tests can reveal how a part works in context</p>\n\n</li>\n<li>\n<p translation-result=\"on\">当移动源代码时（在所难免），你不会忘了同时移动测试。</p><p translation-origin=\"off\">When you move the source (inevitable), you remember to move the test</p>\n\n</li>\n<li>\n<p translation-result=\"on\">当重命名源文件时（在所难免），你不会忘了重命名测试文件。</p><p translation-origin=\"off\">When you rename the source file (inevitable), you remember to rename the test file</p>\n\n</li>\n</ul>\n<p><a id=\"q-specs-in-test-folder\"></a></p>\n<h4 id=\"place-your-spec-files-in-a-test-folder\" translation-result=\"on\">把 spec 文件放到 test 目录下<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#place-your-spec-files-in-a-test-folder\"><i class=\"material-icons\">link</i></a></h4><h4 translation-origin=\"off\" id=\"place-your-spec-files-in-a-test-folder\">Place your spec files in a test folder<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#place-your-spec-files-in-a-test-folder\"><i class=\"material-icons\">link</i></a></h4>\n\n<p translation-result=\"on\">应用的集成测试规范可以测试跨文件夹和模块的多个部分之间的交互。它们并不属于任何一个特定的部分，所以把它们放在任何一个文件旁都很不自然。</p><p translation-origin=\"off\">Application integration specs can test the interactions of multiple parts\nspread across folders and modules.\nThey don't really belong to any part in particular, so they don't have a\nnatural home next to any one file.</p>\n\n<p translation-result=\"on\">最好在 <code>tests</code> 目录下为它们创建一个合适的文件夹。</p><p translation-origin=\"off\">It's often better to create an appropriate folder for them in the <code>tests</code> directory.</p>\n\n<p translation-result=\"on\">当然，用来测试那些测试助手的规约也位于 <code>test</code> 目录下，紧挨着相应的测试助手文件。</p><p translation-origin=\"off\">Of course specs that test the test helpers belong in the <code>test</code> folder,\nnext to their corresponding helper files.</p>\n\n<p><a id=\"ci\"></a></p>\n<h2 id=\"set-up-continuous-integration\" translation-result=\"on\">建立持续集成环境<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#set-up-continuous-integration\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"set-up-continuous-integration\">Set up continuous integration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#set-up-continuous-integration\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">避免项目出 BUG 的最佳方式之一，就是使用测试套件。但是很容易忘了一直运行它。持续集成（CI）服务器让你可以配置项目的代码仓库，以便每次提交和收到 Pull Request 时就会运行你的测试。</p><p translation-origin=\"off\">One of the best ways to keep your project bug-free is through a test suite, but you might forget to run tests all the time.\nContinuous integration (CI) servers let you set up your project repository so that your tests run on every commit and pull request.</p>\n\n<p translation-result=\"on\">已经有一些像 Circle CI 和 Travis CI 这样的付费 CI 服务器，你还可以使用 Jenkins 或其它软件来搭建你自己的免费 CI 服务器。虽然 Circle CI 和 Travis CI 是收费服务，但是它们也会为开源项目提供免费服务。你可以在 GitHub 上创建公开项目，并免费享受这些服务。当你为 Angular 仓库贡献代码时，就会自动用 Circle CI 和 Travis CI 运行整个测试套件。</p><p translation-origin=\"off\">There are paid CI services like Circle CI and Travis CI, and you can also host your own for free using Jenkins and others.\nAlthough Circle CI and Travis CI are paid services, they are provided free for open source projects.\nYou can create a public project on GitHub and add these services without paying.\nContributions to the Angular repository are automatically run through a whole suite of Circle CI tests.</p>\n\n<p translation-result=\"on\">本文档解释了如何配置你的项目，来运行 Circle CI 和 Travis CI，以及如何修改你的测试配置，以便能在这两个环境下用 Chrome 浏览器来运行测试。</p><p translation-origin=\"off\">This article explains how to configure your project to run Circle CI and Travis CI, and also update your test configuration to be able to run tests in the Chrome browser in either environment.</p>\n\n<h3 id=\"configure-project-for-circle-ci\" translation-result=\"on\">为 Circle CI 配置项目<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#configure-project-for-circle-ci\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"configure-project-for-circle-ci\">Configure project for Circle CI<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#configure-project-for-circle-ci\"><i class=\"material-icons\">link</i></a></h3>\n\n<ol>\n<li>\n<p translation-result=\"on\">在项目的根目录下创建一个名叫 <code>.circleci</code> 的目录。</p><p translation-origin=\"off\">Create a folder called <code>.circleci</code> at the project root.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在这个新建的目录下，创建一个名为 <code>config.yml</code> 的文件，内容如下：</p><p translation-origin=\"off\">In the new folder, create a file called <code>config.yml</code> with the following content:</p>\n\n<code-example format=\"yaml\" language=\"yaml\">\n\nversion: 2\njobs:\n  build:\n    working_directory: ~/my-project\n    docker:\n      ‐ image: circleci/node:10-browsers\n    steps:\n      ‐ checkout\n      ‐ restore_cache:\n          key: my-project-{{ .Branch }}-{{ checksum \"package-lock.json\" }}\n      ‐ run: npm install\n      ‐ save_cache:\n          key: my-project-{{ .Branch }}-{{ checksum \"package-lock.json\" }}\n          paths:\n            ‐ \"node_modules\"\n      ‐ run: npm run test -- --no-watch --no-progress --browsers=ChromeHeadlessCI\n\n</code-example>\n<p translation-result=\"on\">该配置会缓存 <code>node_modules/</code> 并使用 <a href=\"https://docs.npmjs.com/cli/run-script\"><code>npm run</code></a> 来运行 CLI 命令，因为 <code>@angular/cli</code> 并没有装到全局。要把参数传给 <code>npm</code> 脚本，这个单独的双中线（<code>--</code>）是必须的。</p><p translation-origin=\"off\">This configuration caches <code>node_modules/</code> and uses <a href=\"https://docs.npmjs.com/cli/run-script\"><code>npm run</code></a> to run CLI commands, because <code>@angular/cli</code> is not installed globally.\nThe double hyphen (<code>--</code>) characters is needed to pass arguments into the <code>npm</code> script.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">提交你的修改，并把它们推送到你的代码仓库中。</p><p translation-origin=\"off\">Commit your changes and push them to your repository.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"https://circleci.com/docs/2.0/first-steps\">注册 Circle CI</a>，并<a href=\"https://circleci.com/add-projects\">添加你的项目</a>。你的项目将会开始构建。</p><p translation-origin=\"off\"><a href=\"https://circleci.com/docs/2.0/first-steps\">Sign up for Circle CI</a> and <a href=\"https://circleci.com/add-projects\">add your project</a>.\nYour project should start building.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">欲知详情，参阅 <a href=\"https://circleci.com/docs/2.0/\">Circle CI 文档</a>。</p><p translation-origin=\"off\">Learn more about Circle CI from <a href=\"https://circleci.com/docs/2.0\">Circle CI documentation</a>.</p>\n\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"configure-project-for-travis-ci\" translation-result=\"on\">为 Travis CI 配置项目<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#configure-project-for-travis-ci\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"configure-project-for-travis-ci\">Configure project for Travis CI<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#configure-project-for-travis-ci\"><i class=\"material-icons\">link</i></a></h3>\n\n<ol>\n<li>\n<p translation-result=\"on\">在项目根目录下创建一个名叫 <code>.travis.yml</code> 的文件，内容如下：</p><p translation-origin=\"off\">Create a file called <code>.travis.yml</code> at the project root, with the following content:</p>\n\n<code-example format=\"yaml\" language=\"yaml\">\n\nlanguage: node_js\nnode_js:\n  ‐ \"10\"\n\naddons:\n  chrome: stable\n\ncache:\n  directories:\n     ‐ ./node_modules\n\ninstall:\n  ‐ npm install\n\nscript:\n  ‐ npm run test -- --no-watch --no-progress --browsers=ChromeHeadlessCI\n\n</code-example>\n<p translation-result=\"on\">它做的事情和 Circle CI 的配置文件一样，只是 Travis 不用 Chrome，而是用 Chromium 代替。</p><p translation-origin=\"off\">This does the same things as the CircleCI configuration, except that Travis doesn't come with Chrome, so use Chromium instead.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">提交你的更改，并把它们推送到你的代码仓库。</p><p translation-origin=\"off\">Commit your changes and push them to your repository.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"https://travis-ci.org/auth\">注册 Travis CI</a> 并<a href=\"https://travis-ci.org/profile\">添加你的项目</a>。 你需要推送一个新的提交，以触发构建。</p><p translation-origin=\"off\"><a href=\"https://travis-ci.org/auth\">Sign up for Travis CI</a> and <a href=\"https://travis-ci.org/profile\">add your project</a>.\nYou'll need to push a new commit to trigger a build.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">欲知详情，参阅 <a href=\"https://docs.travis-ci.com/\">Travis CI 文档</a>。</p><p translation-origin=\"off\">Learn more about Travis CI testing from <a href=\"https://docs.travis-ci.com\">Travis CI documentation</a>.</p>\n\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"configure-project-for-gitlab-ci\" translation-result=\"on\">为 GitLab CI 配置项目<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#configure-project-for-gitlab-ci\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"configure-project-for-gitlab-ci\">Configure project for GitLab CI<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#configure-project-for-gitlab-ci\"><i class=\"material-icons\">link</i></a></h3>\n\n<ol>\n<li>\n<p translation-result=\"on\">在项目根目录下创建一个名为 <code>.gitlab-ci.yml</code> 的文件，内容如下：</p><p translation-origin=\"off\">Create a file called <code>.gitlab-ci.yml</code> at the project root, with the following content:</p>\n\n<code-example format=\"yaml\" language=\"yaml\">\n\nimage: node:14.15-stretch\nvariables:\n  FF_USE_FASTZIP: \"true\"\n\ncache:\n  untracked: true\n  policy: push\n  key: ${CI_COMMIT_SHORT_SHA}\n  paths:\n    ‐ node_modules/\n\n.pull_cached_node_modules:\n  cache:\n    untracked: true\n    key: ${CI_COMMIT_SHORT_SHA}\n    policy: pull\n\nstages:\n  ‐ setup\n  ‐ test\n\ninstall:\n  stage: setup\n  script:\n    ‐ npm ci\n\ntest:\n  stage: test\n  extends: .pull_cached_node_modules\n  before_script:\n    ‐ apt-get update\n    ‐ wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb\n    ‐ apt install -y ./google-chrome*.deb;\n    ‐ export CHROME_BIN=/usr/bin/google-chrome\n  script:\n    ‐ npm run test -- --no-watch --no-progress --browsers=ChromeHeadlessCI\n\n</code-example>\n<p translation-result=\"on\">这种配置会 在 <code>install</code> 作业下缓存 <code>node_modules/</code>，并在 <code>test</code> 作业中重新使用缓存的 <code>node_modules/</code>。</p><p translation-origin=\"off\">This configuration caches <code>node_modules/</code> in the <code>install</code> job and re-uses the cached <code>node_modules/</code> in the <code>test</code> job.</p>\n\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"https://gitlab.com/users/sign_in\">注册 GitLab CI</a> 并<a href=\"https://gitlab.com/projects/new\">添加你的项目</a>。你需要推送新的提交以触发构建。</p><p translation-origin=\"off\"><a href=\"https://gitlab.com/users/sign_in\">Sign up for GitLab CI</a> and <a href=\"https://gitlab.com/projects/new\">add your project</a>.\nYou'll need to push a new commit to trigger a build.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">提交你的更改并将其推送到你的代码仓库。</p><p translation-origin=\"off\">Commit your changes and push them to your repository.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"https://docs.gitlab.com/ee/ci\">从 GitLab CI / CD 文档中</a>了解有关 GitLab CI 测试的更多信息。</p><p translation-origin=\"off\">Learn more about GitLab CI testing from <a href=\"https://docs.gitlab.com/ee/ci\">GitLab CI/CD documentation</a>.</p>\n\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"configure-project-for-github-actions\" translation-result=\"on\">为 GitHub Actions 配置项目<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#configure-project-for-github-actions\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"configure-project-for-github-actions\">Configure project for GitHub Actions<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#configure-project-for-github-actions\"><i class=\"material-icons\">link</i></a></h3>\n\n<ol>\n<li>\n<p translation-result=\"on\">在项目的根目录下创建一个名叫 <code>.github/workflows</code> 的文件夹。</p><p translation-origin=\"off\">Create a folder called <code>.github/workflows</code> at root of your project.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">在新文件夹中，创建一个名为 <code>main.yml</code> 的文件，其内容如下：</p><p translation-origin=\"off\">In the new folder, create a file called <code>main.yml</code> with the following content:</p>\n\n<code-example format=\"yaml\" language=\"yaml\">\n\nname: CI Angular app through Github Actions\non: push\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      ‐ uses: actions/checkout@v2\n      ‐ name: Use Node.js 14.x\n        uses: actions/setup-node@v1\n        with:\n          node-version: 14.x\n\n      ‐ name: Setup\n        run: npm ci\n\n      ‐ name: Test\n        run: |\n          npm test -- --no-watch --no-progress --browsers=ChromeHeadlessCI\n\n</code-example>\n</li>\n<li>\n<p translation-result=\"on\"><a href=\"https://github.com/join\">注册 GitHub</a> 并<a href=\"https://github.com/new\">添加你的项目</a>。你需要推送新的提交以触发构建。</p><p translation-origin=\"off\"><a href=\"https://github.com/join\">Sign up for GitHub</a> and <a href=\"https://github.com/new\">add your project</a>.\nYou'll need to push a new commit to trigger a build.</p>\n\n</li>\n<li>\n<p translation-result=\"on\">提交你的更改并将其推送到你的代码仓库。</p><p translation-origin=\"off\">Commit your changes and push them to your repository.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\"><a href=\"https://docs.github.com/en/actions\">从 GitHub Actions 文档中</a>了解有关 GitHub Actions 的更多信息。</p><p translation-origin=\"off\">Learn more about GitHub Actions from <a href=\"https://docs.github.com/en/actions\">GitHub Actions documentation</a></p>\n\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"configure-cli-for-ci-testing-in-chrome\" translation-result=\"on\">在 Chrome 中配置 CLI 以进行 CI 测试<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#configure-cli-for-ci-testing-in-chrome\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"configure-cli-for-ci-testing-in-chrome\">Configure CLI for CI testing in Chrome<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#configure-cli-for-ci-testing-in-chrome\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">当你要用 CLI 命令 <code>ng test</code> 在自己的环境中运行 CI 测试时，你可能需要再调整一下配置，以运行 Chrome 浏览器测试。</p><p translation-origin=\"off\">While the CLI command <code>ng test</code> is generally running the CI tests in your environment, you might still need to adjust your configuration to run the Chrome browser tests.</p>\n\n<p translation-result=\"on\">这个配置文件是给 <a href=\"https://karma-runner.github.io/latest/config/configuration-file.html\">Karma（直译 \"报应\"）</a>测试运行器使用的，你必须改为不用沙箱的 Chrome 启动方式。</p><p translation-origin=\"off\">There is a configuration file for the <a href=\"https://karma-runner.github.io/latest/config/configuration-file.html\">Karma JavaScript test runner</a>, which you must adjust to start Chrome without sandboxing.</p>\n\n<p translation-result=\"on\">这个例子中我们将使用<a href=\"https://developers.google.com/web/updates/2017/04/headless-chrome#cli\">无头 Chrome</a>。</p><p translation-origin=\"off\">We'll be using <a href=\"https://developers.google.com/web/updates/2017/04/headless-chrome#cli\">Headless Chrome</a> in these examples.</p>\n\n<ul>\n<li>\n<p translation-result=\"on\">在 Karma 配置文件 <code>karma.conf.js</code> 中，浏览器的紧下方，添加自定义的启动器，名叫 ChromeNoSandbox。</p><p translation-origin=\"off\">In the Karma configuration file, <code>karma.conf.js</code>, add a custom launcher called ChromeHeadlessCI below browsers:</p>\n\n<code-example format=\"javascript\" language=\"javascript\">\n\nbrowsers: ['ChromeHeadlessCI'],\ncustomLaunchers: {\n  ChromeHeadlessCI: {\n    base: 'ChromeHeadless',\n    flags: ['--no-sandbox']\n  }\n},\n\n</code-example>\n</li>\n</ul>\n<p translation-result=\"on\">现在，运行下列带有 <code>--no-sandbox</code> 标志的命令：</p><p translation-origin=\"off\">Now, run the following command to use the <code>--no-sandbox</code> flag:</p>\n\n<code-example format=\"shell\" language=\"shell\">\n\nng test --no-watch --no-progress --browsers=ChromeHeadlessCI\n\n</code-example>\n<div class=\"alert is-helpful\">\n<p translation-result=\"on\"><strong>注意</strong>：<br>\n目前，如果你正运行在 Windows 中，还要包含 <code>--disable-gpu</code> 标志。参阅 <a href=\"https://crbug.com/737678\">crbug.com/737678</a>。</p><p translation-origin=\"off\"><strong>NOTE</strong>: <br>\nRight now, you'll also want to include the <code>--disable-gpu</code> flag if you're running on Windows.\nSee <a href=\"https://crbug.com/737678\">crbug.com/737678</a>.</p>\n\n</div>\n<h2 id=\"more-information-on-testing\" translation-result=\"on\">关于测试的更多信息<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#more-information-on-testing\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"more-information-on-testing\">More information on testing<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/testing#more-information-on-testing\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">当你设置准备好测试环境之后，可能会发现以下测试指南很有用。</p><p translation-origin=\"off\">After you've set up your application for testing, you might find the following testing guides useful.</p>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"left\"><p translation-result=\"on\">详情</p><p translation-origin=\"off\">Details</p></th>\n</tr>\n</thead>\n<tbody>\n\n<tr>\n<td align=\"left\"><p translation-result=\"on\"><a href=\"guide/testing-code-coverage\">代码覆盖</a></p><p translation-origin=\"off\"><a href=\"guide/testing-code-coverage\">Code coverage</a></p></td>\n<td align=\"left\"><p translation-result=\"on\">找出你的测试覆盖了多少应用，以及如何指定所需的数量。</p><p translation-origin=\"off\">How much of your app your tests are covering and how to specify required amounts.</p></td>\n</tr>\n\n<tr>\n<td align=\"left\"><p translation-result=\"on\"><a href=\"guide/testing-services\">测试服务</a></p><p translation-origin=\"off\"><a href=\"guide/testing-services\">Testing services</a></p></td>\n<td align=\"left\"><p translation-result=\"on\">如何测试应用中所用的服务。</p><p translation-origin=\"off\">How to test the services your application uses.</p></td>\n</tr>\n\n<tr>\n<td align=\"left\"><p translation-result=\"on\"><a href=\"guide/testing-components-basics\">测试组件的基础知识</a></p><p translation-origin=\"off\"><a href=\"guide/testing-components-basics\">Basics of testing components</a></p></td>\n<td align=\"left\"><p translation-result=\"on\">测试 Angular 组件的基础知识。</p><p translation-origin=\"off\">Basics of testing Angular components.</p></td>\n</tr>\n\n<tr>\n<td align=\"left\"><p translation-result=\"on\"><a href=\"guide/testing-components-scenarios\">组件测试场景</a></p><p translation-origin=\"off\"><a href=\"guide/testing-components-scenarios\">Component testing scenarios</a></p></td>\n<td align=\"left\"><p translation-result=\"on\">了解各种组件测试场景和用例。</p><p translation-origin=\"off\">Various kinds of component testing scenarios and use cases.</p></td>\n</tr>\n\n<tr>\n<td align=\"left\"><p translation-result=\"on\"><a href=\"guide/testing-attribute-directives\">测试属性型指令</a></p><p translation-origin=\"off\"><a href=\"guide/testing-attribute-directives\">Testing attribute directives</a></p></td>\n<td align=\"left\"><p translation-result=\"on\">如何测试你的属性型指令。</p><p translation-origin=\"off\">How to test your attribute directives.</p></td>\n</tr>\n\n<tr>\n<td align=\"left\"><p translation-result=\"on\"><a href=\"guide/testing-pipes\">测试管道</a></p><p translation-origin=\"off\"><a href=\"guide/testing-pipes\">Testing pipes</a></p></td>\n<td align=\"left\"><p translation-result=\"on\">如何测试管道。</p><p translation-origin=\"off\">How to test pipes.</p></td>\n</tr>\n\n<tr>\n<td align=\"left\"><p translation-result=\"on\"><a href=\"guide/test-debugging\">调试测试代码</a></p><p translation-origin=\"off\"><a href=\"guide/test-debugging\">Debugging tests</a></p></td>\n<td align=\"left\"><p translation-result=\"on\">发现测试代码的常见 BUG。</p><p translation-origin=\"off\">Common testing bugs.</p></td>\n</tr>\n\n<tr>\n<td align=\"left\"><p translation-result=\"on\"><a href=\"guide/testing-utility-apis\">测试实用工具 API</a></p><p translation-origin=\"off\"><a href=\"guide/testing-utility-apis\">Testing utility APIs</a></p></td>\n<td align=\"left\"><p translation-result=\"on\">Angular 的测试特性。</p><p translation-origin=\"off\">Angular testing features.</p></td>\n</tr>\n\n</tbody>\n</table>\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间： 2/28/2022</div>\n</div>\n\n\n<!-- links to this doc:\n - guide/architecture-next-steps\n - guide/developer-guide-overview\n - guide/docs-style-guide\n - guide/example-apps-list\n - guide/test-debugging\n - guide/testing-utility-apis\n-->\n<!-- links from this doc:\n - cli\n - cli/test\n - guide/test-debugging\n - guide/testing#configuration\n - guide/testing#configure-cli-for-ci-testing-in-chrome\n - guide/testing#configure-project-for-circle-ci\n - guide/testing#configure-project-for-github-actions\n - guide/testing#configure-project-for-gitlab-ci\n - guide/testing#configure-project-for-travis-ci\n - guide/testing#more-information-on-testing\n - guide/testing#other-test-frameworks\n - guide/testing#place-your-spec-file-next-to-the-file-it-tests\n - guide/testing#place-your-spec-files-in-a-test-folder\n - guide/testing#prerequisites\n - guide/testing#set-up-continuous-integration\n - guide/testing#set-up-testing\n - guide/testing#test-file-name-and-location\n - guide/testing#testing\n - guide/testing-attribute-directives\n - guide/testing-code-coverage\n - guide/testing-components-basics\n - guide/testing-components-scenarios\n - guide/testing-pipes\n - guide/testing-services\n - guide/testing-utility-apis\n - tutorial\n - https://circleci.com/add-projects\n - https://circleci.com/docs/2.0\n - https://circleci.com/docs/2.0/\n - https://circleci.com/docs/2.0/first-steps\n - https://crbug.com/737678\n - https://developers.google.com/web/updates/2017/04/headless-chrome#cli\n - https://docs.github.com/en/actions\n - https://docs.gitlab.com/ee/ci\n - https://docs.npmjs.com/cli/run-script\n - https://docs.travis-ci.com\n - https://docs.travis-ci.com/\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/testing.md?message=docs%3A%20请简述你的修改...\n - https://github.com/join\n - https://github.com/new\n - https://gitlab.com/projects/new\n - https://gitlab.com/users/sign_in\n - https://jasmine.github.io\n - https://karma-runner.github.io\n - https://karma-runner.github.io/latest/config/configuration-file.html\n - https://travis-ci.org/auth\n - https://travis-ci.org/profile\n-->"
}