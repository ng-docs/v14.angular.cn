{
  "id": "guide/typed-forms",
  "title": "Typed Forms",
  "contents": "\n\n\n<div class=\"github-links\">\n  <a href=\"https://github.com/angular/angular-cn/edit/aio/aio/content/guide/typed-forms.md?message=docs%3A%20请简述你的修改...\" aria-label=\"提供编辑建议\" title=\"提供编辑建议\"><i class=\"material-icons\" aria-hidden=\"true\" role=\"img\">mode_edit</i></a>\n</div>\n\n\n<div class=\"content\">\n  <h1 id=\"typed-forms\" translation-result=\"on\">键入的表单<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#typed-forms\"><i class=\"material-icons\">link</i></a></h1><h1 translation-origin=\"off\" id=\"typed-forms\">Typed Forms<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#typed-forms\"><i class=\"material-icons\">link</i></a></h1>\n\n<p translation-result=\"on\">从 Angular 14 开始，响应式表单默认是严格类型的。</p><p translation-origin=\"off\">As of Angular 14, reactive forms are strictly typed by default.</p>\n\n<p><a id=\"prerequisites\"></a></p>\n<h2 id=\"prerequisites\" translation-result=\"on\">前提条件<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#prerequisites\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"prerequisites\">Prerequisites<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#prerequisites\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">作为本指南的背景，你应该已经熟悉<a href=\"guide/reactive-forms\" title=\"响应式表单\">Angular 响应式表单</a>。</p><p translation-origin=\"off\">As background for this guide, you should already be familiar with <a href=\"guide/reactive-forms\" title=\"Reactive Forms\">Angular Reactive Forms</a>.</p>\n\n<p><a id=\"intro\"></a></p>\n<h2 id=\"overview-of-typed-forms\" translation-result=\"on\">类型化表单概览<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#overview-of-typed-forms\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"overview-of-typed-forms\">Overview of Typed Forms<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#overview-of-typed-forms\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">使用 Angular 响应式表单，你可以显式指定<em>表单 model</em>。作为一个简单的例子，考虑这个基本的用户登录表单：</p><p translation-origin=\"off\">With Angular reactive forms, you explicitly specify a <em>form model</em>. As a simple example, consider this basic user login form:</p>\n\n<code-example language=\"ts\">\nconst login = new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>({\n    <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''),\n    password: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(''),\n});\n</code-example>\n<p translation-result=\"on\">Angular 提供了许多 API 来与此 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 交互。例如，你可以调用 <code>login.value</code> 、 <code>login.controls</code> 、 <code>login.patchValue</code> 等。（有关完整的 API 参考，请参阅<a href=\"api/forms/FormGroup\">API 文档</a>。）</p><p translation-origin=\"off\">Angular provides many APIs for interacting with this <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>. For example, you may call <code>login.value</code>, <code>login.controls</code>, <code>login.patchValue</code>, etc. (For a full API reference, see the <a href=\"api/forms/FormGroup\">API documentation</a>.)</p>\n\n<p translation-result=\"on\">在以前的 Angular 版本中，这些 API 中的大多数都在其类型中的某处包含 <code>any</code>，并且与控件结构或值本身的交互不是类型安全的。例如：你可以编写以下无效代码：</p><p translation-origin=\"off\">In previous Angular versions, most of these APIs included <code>any</code> somewhere in their types, and interacting with the structure of the controls, or the values themselves, was not type-safe. For example: you could write the following invalid code:</p>\n\n<code-example language=\"ts\">\nconst emailDomain = login.value.email.domain;\n</code-example>\n<p translation-result=\"on\">使用严格类型的响应式形式，上面的代码不会编译，因为 <code><a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a></code> 上没有 <code>domain</code> 属性。</p><p translation-origin=\"off\">With strictly typed reactive forms, the above code does not compile, because there is no <code>domain</code> property on <code><a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a></code>.</p>\n\n<p translation-result=\"on\">除了增加安全性之外，这些类型还支持各种其他改进，例如 IDE 中更好的自动完成，以及显式指定表单结构的方式。</p><p translation-origin=\"off\">In addition to the added safety, the types enable a variety of other improvements, such as better autocomplete in IDEs, and an explicit way to specify form structure.</p>\n\n<p translation-result=\"on\">这些改进当前仅适用于<em>响应</em>式表单（不适用于<a href=\"guide/forms\" title=\"表单指南\"><em>模板驱动的</em>表单</a>）。</p><p translation-origin=\"off\">These improvements currently apply only to <em>reactive</em> forms (not <a href=\"guide/forms\" title=\"Forms Guide\"><em>template-driven</em> forms</a>).</p>\n\n<p><a id=\"automated-migration\"></a></p>\n<h2 id=\"automated-untyped-forms-migration\" translation-result=\"on\">自动无类型表单迁移<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#automated-untyped-forms-migration\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"automated-untyped-forms-migration\">Automated Untyped Forms Migration<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#automated-untyped-forms-migration\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">升级到 Angular 14 时，包含的迁移将自动使用相应的无类型版本替换代码中的所有表单类。例如，上面的代码段将变为：</p><p translation-origin=\"off\">When upgrading to Angular 14, an included migration will automatically replace all the forms classes in your code with corresponding untyped versions. For example, the snippet from above would become:</p>\n\n<code-example language=\"ts\">\nconst login = new <a href=\"api/forms/UntypedFormGroup\" class=\"code-anchor\">UntypedFormGroup</a>({\n    <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>: new <a href=\"api/forms/UntypedFormControl\" class=\"code-anchor\">UntypedFormControl</a>(''),\n    password: new <a href=\"api/forms/UntypedFormControl\" class=\"code-anchor\">UntypedFormControl</a>(''),\n});\n</code-example>\n<p translation-result=\"on\">每个 <code>Untyped</code> 符号都与以前的 Angular 版本具有完全相同的语义，因此你的应用程序应该像以前一样继续编译。通过删除 <code>Untyped</code> 前缀，你可以增量启用这些类型。</p><p translation-origin=\"off\">Each <code>Untyped</code> symbol has exactly the same semantics as in previous Angular versions, so your application should continue to compile as before. By removing the <code>Untyped</code> prefixes, you can incrementally enable the types.</p>\n\n<p><a id=\"form-control-inference\"></a></p>\n<h2 id=\"formcontrol-getting-started\" translation-result=\"on\"><code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code> ：入门<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#formcontrol-getting-started\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"formcontrol-getting-started\"><code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a></code>: Getting Started<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#formcontrol-getting-started\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">最简单的形式由单个控件组成：</p><p translation-origin=\"off\">The simplest possible form consists of a single control:</p>\n\n<code-example language=\"ts\">\nconst <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a> = new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('angularrox@gmail.com');\n</code-example>\n<p translation-result=\"on\">此控件将被自动推断为 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>&#x3C;string|null></code> 类型。TypeScript 会在整个<a href=\"api/forms/FormControl\"><code>FormControl</code> API</a>中自动强制执行此类型，例如 <code>email.value</code> 、 <code>email.valueChanges</code> 、 <code>email.setValue(...)</code> 等。</p><p translation-origin=\"off\">This control will be automatically inferred to have the type <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>&#x3C;string|null></code>. TypeScript will automatically enforce this type throughout the <a href=\"api/forms/FormControl\"><code>FormControl</code> API</a>, such as <code>email.value</code>, <code>email.valueChanges</code>, <code>email.setValue(...)</code>, etc.</p>\n\n<h3 id=\"nullability\" translation-result=\"on\">可空性<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#nullability\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"nullability\">Nullability<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#nullability\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">你可能想知道：为什么此控件的类型包含 <code>null</code> ？这是因为控件可以随时通过调用 reset 变为 <code>null</code> ：</p><p translation-origin=\"off\">You might wonder: why does the type of this control include <code>null</code>?  This is because the control can become <code>null</code> at any time, by calling reset:</p>\n\n<code-example language=\"ts\">\nconst <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a> = new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('angularrox@gmail.com');\nemail.reset();\nconsole.log(email.value); // null\n</code-example>\n<p translation-result=\"on\">TypeScript 将强制你始终处理控件已变为 <code>null</code> 的可能性。如果要使此控件不可为空，可以用 <code>nonNullable</code> 选项。这将导致控件重置为其初始值，而不是 <code>null</code> ：</p><p translation-origin=\"off\">TypeScript will enforce that you always handle the possibility that the control has become <code>null</code>. If you want to make this control non-nullable, you may use the <code>nonNullable</code> option. This will cause the control to reset to its intial value, instead of <code>null</code>:</p>\n\n<code-example language=\"ts\">\nconst <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a> = new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('angularrox@gmail.com', {nonNullable: true});\nemail.reset();\nconsole.log(email.value); // angularrox@gmail.com\n</code-example>\n<p translation-result=\"on\">重申一下，此选项会在调用 <code>.reset()</code> 时影响表单的运行时行为，应小心翻转。</p><p translation-origin=\"off\">To reiterate, this option affects the runtime behavior of your form when <code>.reset()</code> is called, and should be flipped with care.</p>\n\n<h3 id=\"specifying-an-explicit-type\" translation-result=\"on\">指定显式类型<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#specifying-an-explicit-type\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"specifying-an-explicit-type\">Specifying an Explicit Type<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#specifying-an-explicit-type\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">可以指定类型，而不是依赖推理。考虑一个初始化为 <code>null</code> 的控件。因为初始值为 <code>null</code>，所以 TypeScript 将推断 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>&#x3C;null></code>，这比我们想要的要窄。</p><p translation-origin=\"off\">It is possible to specify the type, instead of relying on inference. Consider a control that is initialized to <code>null</code>. Because the initial value is <code>null</code>, TypeScript will infer <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>&#x3C;null></code>, which is narrower than we want.</p>\n\n<code-example language=\"ts\">\nconst <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a> = new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>(null);\nemail.setValue('angularrox@gmail.com'); // Error!\n</code-example>\n<p translation-result=\"on\">为防止这种情况，我们将类型显式指定为 <code>string|null</code> ：</p><p translation-origin=\"off\">To prevent this, we explicitly specify the type as <code>string|null</code>:</p>\n\n<code-example language=\"ts\">\nconst <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a> = new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>&#x3C;string|null>(null);\nemail.setValue('angularrox@gmail.com');\n</code-example>\n<p><a id=\"form-array\"></a></p>\n<h2 id=\"formarray-dynamic-homogenous-collections\" translation-result=\"on\"><code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> ：动态的、同质的集合<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#formarray-dynamic-homogenous-collections\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"formarray-dynamic-homogenous-collections\"><code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code>: Dynamic, Homogenous Collections<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#formarray-dynamic-homogenous-collections\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 包含一个开放式控件列表。type 参数对应于每个内部控件的类型：</p><p translation-origin=\"off\">A <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> contains an open-ended list of controls. The type parameter corresponds to the type of each inner control:</p>\n\n<code-example language=\"ts\">\nconst names = new <a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a>([new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('Alex')]);\nnames.push(new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('Jess'));\n</code-example>\n<p translation-result=\"on\">此 <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> 将具有内部控件类型 <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>&#x3C;string|null></code>。</p><p translation-origin=\"off\">This <code><a href=\"api/forms/FormArray\" class=\"code-anchor\">FormArray</a></code> will have the inner controls type <code><a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>&#x3C;string|null></code>.</p>\n\n<p translation-result=\"on\">如果你想在数组中有多个不同的元素类型，则必须使用 <code><a href=\"api/forms/UntypedFormArray\" class=\"code-anchor\">UntypedFormArray</a></code>，因为 TypeScript 无法推断哪种元素类型将出现在哪个位置。</p><p translation-origin=\"off\">If you want to have multiple different element types inside the array, you must use <code><a href=\"api/forms/UntypedFormArray\" class=\"code-anchor\">UntypedFormArray</a></code>, because TypeScript cannot infer which element type will occur at which position.</p>\n\n<p><a id=\"form-group-record\"></a></p>\n<h2 id=\"formgroup-and-formrecord\" translation-result=\"on\"><code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 和 <code><a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#formgroup-and-formrecord\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"formgroup-and-formrecord\"><code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> and <code><a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#formgroup-and-formrecord\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\">Angular 为具有枚举键集的表单提供了 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 类型，并为开放式或动态组提供了一种名为 <code><a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a></code> 的类型。</p><p translation-origin=\"off\">Angular provides the <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> type for forms with an enumerated set of keys, and a type called <code><a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a></code>, for open-ended or dynamic groups.</p>\n\n<h3 id=\"partial-values\" translation-result=\"on\">部分值<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#partial-values\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"partial-values\">Partial Values<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#partial-values\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">再次考虑一个登录表单：</p><p translation-origin=\"off\">Consider again a login form:</p>\n\n<code-example language=\"ts\">\nconst login = new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>({\n    <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('', {nonNullable: true}),\n    password: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('', {nonNullable: true}),\n});\n</code-example>\n<p translation-result=\"on\">在任何 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 上，都<a href=\"api/forms/FormGroup\">可以禁用控件</a>。任何禁用的控件都不会出现在组的值中。</p><p translation-origin=\"off\">On any <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>, it is <a href=\"api/forms/FormGroup\">possible to disable controls</a>. Any disabled control will not appear in the group's value.</p>\n\n<p translation-result=\"on\">因此，<code>login.value</code> 的类型是 <code>Partial&#x3C;{<a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>: string, password: string}></code>。这种类型的 <code>Partial</code> 意味着每个成员可能是未定义的。</p><p translation-origin=\"off\">As a consequence, the type of <code>login.value</code> is <code>Partial&#x3C;{<a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>: string, password: string}></code>. The <code>Partial</code> in this type means that each member might be undefined.</p>\n\n<p translation-result=\"on\">更具体地说，<code>login.value.email</code> 的类型是 <code>string|undefined</code>，TypeScript 将强制你处理可能 <code>undefined</code> 的值（如果你启用了 <code>strictNullChecks</code>）。</p><p translation-origin=\"off\">More specifically, the type of <code>login.value.email</code> is <code>string|undefined</code>, and TypeScript will enforce that you handle the possibly <code>undefined</code> value (if you have <code>strictNullChecks</code> enabled).</p>\n\n<p translation-result=\"on\">如果你想访问<em>包括</em>禁用控件的值，从而绕过可能的 <code>undefined</code> 字段，可以用 <code>login.getRawValue()</code>。</p><p translation-origin=\"off\">If you want to access the value <em>including</em> disabled controls, and thus bypass possible <code>undefined</code> fields, you can use <code>login.getRawValue()</code>.</p>\n\n<h3 id=\"optional-controls-and-dynamic-groups\" translation-result=\"on\">可选控件和动态组<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#optional-controls-and-dynamic-groups\"><i class=\"material-icons\">link</i></a></h3><h3 translation-origin=\"off\" id=\"optional-controls-and-dynamic-groups\">Optional Controls and Dynamic Groups<a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#optional-controls-and-dynamic-groups\"><i class=\"material-icons\">link</i></a></h3>\n\n<p translation-result=\"on\">某些表单的控件可能存在也可能不存在，可以在运行时添加和删除。你可以用<em>可选字段</em>来表示这些控件：</p><p translation-origin=\"off\">Some forms have controls that may or may not be present, which can be added and removed at runtime. You can represent these controls using <em>optional fields</em>:</p>\n\n<code-example language=\"ts\">\ninterface LoginForm {\n    <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>: <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>&#x3C;string>;\n    password?: <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>&#x3C;string>;\n}\n\nconst login = new <a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a>&#x3C;LoginForm>({\n    <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('', {nonNullable: true}),\n    password: new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('', {nonNullable: true}),\n});\n\nlogin.removeControl('password');\n</code-example>\n<p translation-result=\"on\">在这种形式中，我们显式指定类型，这允许我们将 <code>password</code> 控制设置为可选。TypeScript 将强制要求只能添加或删除可选控件。</p><p translation-origin=\"off\">In this form, we explicitly specify the type, which allows us to make the <code>password</code> control optional. TypeScript will enforce that only optional controls can be added or removed.</p>\n\n<h3 id=\"formrecord\"><code><a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#formrecord\"><i class=\"material-icons\">link</i></a></h3>\n<p translation-result=\"on\">某些 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> 的用法不符合上述模式，因为键是无法提前知道的。<code><a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a></code> 类就是为这种情况设计的：</p><p translation-origin=\"off\">Some <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> usages do not fit the above pattern because the keys are not known ahead of time. The <code><a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a></code> class is designed for that case:</p>\n\n<code-example language=\"ts\">\nconst addresses = new <a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a>&#x3C;<a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>&#x3C;string|null>>({});\naddresses.addControl('Andrew', new <a href=\"api/forms/FormControl\" class=\"code-anchor\">FormControl</a>('2340 Folsom St'));\n</code-example>\n<p translation-result=\"on\">任何 <code>string|null</code> 类型的控件都可以添加到此 <code><a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a></code>。</p><p translation-origin=\"off\">Any control of type <code>string|null</code> can be added to this <code><a href=\"api/forms/FormRecord\" class=\"code-anchor\">FormRecord</a></code>.</p>\n\n<p translation-result=\"on\">如果你需要一个动态（开放式）和异构（控件是不同类型）的 <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code>，则无法提高类型安全，你应该使用 <code><a href=\"api/forms/UntypedFormGroup\" class=\"code-anchor\">UntypedFormGroup</a></code>。</p><p translation-origin=\"off\">If you need a <code><a href=\"api/forms/FormGroup\" class=\"code-anchor\">FormGroup</a></code> that is both dynamic (open-ended) and heterogenous (the controls are different types), no improved type safety is possible, and you should use <code><a href=\"api/forms/UntypedFormGroup\" class=\"code-anchor\">UntypedFormGroup</a></code>.</p>\n\n<h2 id=\"formbuilder-and-nonnullableformbuilder\" translation-result=\"on\"><code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 和 <code><a href=\"api/forms/NonNullableFormBuilder\" class=\"code-anchor\">NonNullableFormBuilder</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#formbuilder-and-nonnullableformbuilder\"><i class=\"material-icons\">link</i></a></h2><h2 translation-origin=\"off\" id=\"formbuilder-and-nonnullableformbuilder\"><code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> and <code><a href=\"api/forms/NonNullableFormBuilder\" class=\"code-anchor\">NonNullableFormBuilder</a></code><a title=\"Link to this heading\" class=\"header-link\" aria-hidden=\"true\" href=\"guide/typed-forms#formbuilder-and-nonnullableformbuilder\"><i class=\"material-icons\">link</i></a></h2>\n\n<p translation-result=\"on\"><code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 类已升级为支持新类型，方式与上面的示例相同。</p><p translation-origin=\"off\">The <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> class has been upgraded to support the new types as well, in the same manner as the above examples.</p>\n\n<p translation-result=\"on\">此外，还提供了一个额外的构建器：<code><a href=\"api/forms/NonNullableFormBuilder\" class=\"code-anchor\">NonNullableFormBuilder</a></code>。这种类型是在每个控件上指定 <code>{nonNullable: true}</code> 的简写，并且可以从大型不可为空形式中消除重要的样板。你可以用 <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code> 上的 <code>nonNullable</code> 属性访问它：</p><p translation-origin=\"off\">Additionally, an additional builder is available: <code><a href=\"api/forms/NonNullableFormBuilder\" class=\"code-anchor\">NonNullableFormBuilder</a></code>. This type is shorthand for specifying <code>{nonNullable: true}</code> on every control, and can eliminate significant boilerplate from large non-nullable forms. You can access it using the <code>nonNullable</code> property on a <code><a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a></code>:</p>\n\n<code-example language=\"ts\">\nconst fb = new <a href=\"api/forms/FormBuilder\" class=\"code-anchor\">FormBuilder</a>();\nconst login = fb.nonNullable.group({\n    <a href=\"api/forms/EmailValidator\" class=\"code-anchor\">email</a>: '',\n    password: '',\n});\n</code-example>\n<p translation-result=\"on\">在上面的示例中，两个内部控件都将不可为空（即将设置 <code>nonNullable</code>）。</p><p translation-origin=\"off\">On the above example, both inner controls will be non-nullable (i.e. <code>nonNullable</code> will be set).</p>\n\n<p translation-result=\"on\">你还可以用名称 <code><a href=\"api/forms/NonNullableFormBuilder\" class=\"code-anchor\">NonNullableFormBuilder</a></code> 注入它。</p><p translation-origin=\"off\">You can also inject it using the name <code><a href=\"api/forms/NonNullableFormBuilder\" class=\"code-anchor\">NonNullableFormBuilder</a></code>.</p>\n\n<!-- links -->\n<!-- external links -->\n<!-- end links -->\n\n  <div class=\"reviewed\">最后复查时间： 5/10/2022</div>\n</div>\n\n\n<!-- links to this doc:\n-->\n<!-- links from this doc:\n - api/forms/EmailValidator\n - api/forms/FormArray\n - api/forms/FormBuilder\n - api/forms/FormControl\n - api/forms/FormGroup\n - api/forms/FormRecord\n - api/forms/NonNullableFormBuilder\n - api/forms/UntypedFormArray\n - api/forms/UntypedFormControl\n - api/forms/UntypedFormGroup\n - guide/forms\n - guide/reactive-forms\n - guide/typed-forms#automated-untyped-forms-migration\n - guide/typed-forms#formarray-dynamic-homogenous-collections\n - guide/typed-forms#formbuilder-and-nonnullableformbuilder\n - guide/typed-forms#formcontrol-getting-started\n - guide/typed-forms#formgroup-and-formrecord\n - guide/typed-forms#formrecord\n - guide/typed-forms#nullability\n - guide/typed-forms#optional-controls-and-dynamic-groups\n - guide/typed-forms#overview-of-typed-forms\n - guide/typed-forms#partial-values\n - guide/typed-forms#prerequisites\n - guide/typed-forms#specifying-an-explicit-type\n - guide/typed-forms#typed-forms\n - https://github.com/angular/angular-cn/edit/aio/aio/content/guide/typed-forms.md?message=docs%3A%20请简述你的修改...\n-->"
}